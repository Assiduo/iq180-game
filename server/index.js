import express from "express";
import http from "http";
import { Server } from "socket.io";
import cors from "cors";
import path from "path";
import { fileURLToPath } from "url";
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

/* üöÄ INITIAL SETUP -------------------------------------------------- */
const app = express();
app.use(cors());

const server = http.createServer(app);
const io = new Server(server, { cors: { origin: "*" } });

/* üåç GLOBAL STATE ---------------------------------------------------- */
let players = {}; // { socket.id: { nickname, mode, isOnline } }
let waitingRooms = { easy: [], hard: [] };
let gameRooms = {}; // { mode: { players, turnOrder, currentTurnIndex, currentTurn, rounds } }

/* üß∞ ADMIN API (ADD HERE) ------------------------------------------- */
// GET /admin/clients  -> online count, list, and room snapshots
app.get("/admin/clients", (_req, res) => {
  const online = Object.values(players)
    .filter((p) => p.isOnline)
    .map((p) => p.nickname);

  const rooms = Object.fromEntries(
    Object.entries(gameRooms).map(([mode, r]) => [
      mode,
      r
        ? {
            players: r.players,
            turnOrder: r.turnOrder,
            currentTurn: r.currentTurn,
            rounds: r.rounds,
          }
        : null,
    ])
  );

  res.json({ onlineCount: online.length, online, rooms });
});

// POST /admin/reset -> clear server state and end any running games
app.post("/admin/reset", (_req, res) => {
  waitingRooms = { easy: [], hard: [] };
  gameRooms = {};
  // keep players but detach them from rooms
  for (const id of Object.keys(players)) {
    if (players[id]) {
      players[id].mode = null;
    }
  }
  io.emit("gameover", { reason: "reset_by_admin" });
  updatePlayerList();
  res.json({ ok: true });
});

/* ‚öôÔ∏è SOCKET EVENTS --------------------------------------------------- */

/* üé≤ SERVER PROBLEM GENERATOR -------------------------------------- */
function createExpressionWithResult(numbers, ops, mode, disabledOps = []) {
  const shuffle = (arr) => arr.sort(() => Math.random() - 0.5);
  const nums = shuffle([...numbers]);
  const allowedOps = ops.filter((op) => !disabledOps.includes(op));
  let expr = "", attempts = 0, result = 0;

  while ((!Number.isInteger(result) || result <= 0) && attempts < 300) {
    attempts++;
    expr = "";
    for (let i = 0; i < nums.length; i++) {
      let n = nums[i];
      if (mode === "hard" && allowedOps.includes("‚àö") && Math.random() < 0.3)
        n = `‚àö${n}`;
      expr += n;
      if (i < nums.length - 1)
        expr += allowedOps[Math.floor(Math.random() * allowedOps.length)];
    }
    try {
      const clean = expr
        .replace(/√ó/g, "*")
        .replace(/√∑/g, "/")
        .replace(/‚àö(\d+)/g, "Math.sqrt($1)");
      result = eval(clean);
    } catch {
      result = 0;
    }
  }
  return { expr, result };
}

function generateProblem(mode) {
  const nums = Array.from({ length: 9 }, (_, i) => i + 1);
  const selected = [];
  while (selected.length < 5) {
    const idx = Math.floor(Math.random() * nums.length);
    selected.push(nums.splice(idx, 1)[0]);
  }

  const baseOps = ["+", "-", "√ó", "√∑"];
  const dis = [];
  if (mode === "hard") {
    while (dis.length < 2) {
      const op = baseOps[Math.floor(Math.random() * baseOps.length)];
      if (!dis.includes(op)) dis.push(op);
    }
  }

  const allOps = mode === "hard" ? baseOps.concat(["‚àö", "(", ")"]) : baseOps;
  const { expr, result } = createExpressionWithResult(selected, allOps, mode, dis);
  return {
    digits: selected,
    operators: allOps,
    disabledOps: dis,
    target: result,
    expr,
    mode,
  };
}


io.on("connection", (socket) => {
  console.log("üü¢ Player connected:", socket.id);

  /* ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô */
  socket.on("setNickname", (nickname) => {
    if (!nickname) return;
    players[socket.id] = { nickname, mode: null, isOnline: true };
    console.log(`üë§ ${nickname} is now online`);
    updatePlayerList();
  });

  /* ‚úÖ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡πâ‡∏≠‡∏á‡∏£‡∏≠‡πÄ‡∏Å‡∏° */
  socket.on("joinGame", ({ nickname, mode }) => {
    if (!nickname || !mode) return;

    // ‡∏•‡∏ö‡∏à‡∏≤‡∏Å‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
    const old = players[socket.id];
    if (old?.mode) {
      waitingRooms[old.mode] = waitingRooms[old.mode].filter(
        (p) => p !== old.nickname
      );
    }

    // ‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡πâ‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
    players[socket.id] = { nickname, mode, isOnline: true };
    socket.join(mode);

    if (!waitingRooms[mode].includes(nickname)) {
      waitingRooms[mode].push(nickname);
    }

    console.log(`üë§ ${nickname} joined ${mode}`);
    io.to(mode).emit("waitingList", { mode, players: waitingRooms[mode] });
    updatePlayerList();

    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ñ‡∏£‡∏ö 2 ‡∏Ñ‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏õ ‚Üí ‡πÉ‡∏´‡πâ host ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÑ‡∏î‡πâ
    if (waitingRooms[mode].length >= 2) {
      io.to(mode).emit("canStart", { mode, canStart: true });
    }
  });

  /* üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏° */
  socket.on("startGame", ({ mode, nickname }) => {
    if (!mode || !nickname) return;
    const activePlayers = [...waitingRooms[mode]];
    if (activePlayers.length < 2) return;

    console.log(`üöÄ ${nickname} started ${mode} game with:`, activePlayers);

    const shuffled = [...activePlayers].sort(() => Math.random() - 0.5);
    const ROUND_TIME = 30;
    let gameTimers = {};

    gameRooms[mode] = {
      players: activePlayers,
      turnOrder: shuffled,
      currentTurnIndex: 0,
      currentTurn: shuffled[0],
      rounds: 1,
      currentProblem: generateProblem(mode), // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏à‡∏ó‡∏¢‡πå‡πÅ‡∏£‡∏Å
      answers: [], // ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≠‡∏ö
    };

    io.to(mode).emit("preGameStart", {
      mode,
      players: activePlayers,
      starter: nickname,
      countdown: 3,
    });

    setTimeout(() => {
      io.to(mode).emit("gameStart", {
        ...gameRooms[mode].currentProblem, // ‚úÖ ‡πÉ‡∏ä‡πâ‡πÇ‡∏à‡∏ó‡∏¢‡πå‡∏à‡∏≤‡∏Å server
        players: activePlayers,
        startedBy: nickname,
        currentTurn: shuffled[0],
        message: `üéÆ Game started by ${nickname} (${shuffled.join(", ")})`,
        round: 1,
      });

      setTimeout(() => {
        const firstSocket = findSocketByNickname(shuffled[0]);
        const startTime = Date.now();
        io.to(mode).emit("syncTimer", { mode, startTime });
        if (firstSocket) io.to(firstSocket).emit("yourTurn", { mode });
        console.log(`üïí Timer started at ${new Date(startTime).toLocaleTimeString()}`);
      }, 500);

      waitingRooms[mode] = [];
    }, 3000);
  });


  // üíæ ‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ lock ‡πÅ‡∏¢‡∏Å‡∏ï‡πà‡∏≠ mode
  const roundLock = { easy: false, hard: false };

  /* üîÅ ‡∏™‡∏•‡∏±‡∏ö‡πÄ‡∏ó‡∏¥‡∏£‡πå‡∏ô (resume game ‡∏´‡∏£‡∏∑‡∏≠ auto-next) */
  socket.on("resumeGame", ({ mode }) => {
    const room = gameRooms[mode];
    if (!room) return;

    // ‚úÖ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô resume ‡∏ã‡πâ‡∏≥
    if (roundLock[mode]) {
      console.log(`‚ö†Ô∏è [LOCKED] Resume for ${mode} ignored (still processing round ${room.rounds})`);
      return;
    }
    roundLock[mode] = true;

    // ‡∏ñ‡πâ‡∏≤‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÑ‡∏°‡πà‡∏û‡∏≠ ‚Üí ‡∏à‡∏ö‡πÄ‡∏Å‡∏°
    if (!room.players || room.players.length < 2) {
      console.log(`üíÄ Game in ${mode} ended ‚Äî not enough players`);
      io.to(mode).emit("gameover", { reason: "not_enough_players" });
      delete gameRooms[mode];
      roundLock[mode] = false;
      return;
    }

    // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡∏ô‡∏±‡∏ö‡πÄ‡∏ó‡∏¥‡∏£‡πå‡∏ô
    if (room.turnCount === undefined) room.turnCount = 0;
    room.turnCount += 1;

    // ‚úÖ ‡∏Ñ‡∏£‡∏ö‡∏£‡∏≠‡∏ö ‚Üí ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≠‡∏ö‡πÉ‡∏´‡∏°‡πà
    if (room.turnCount >= room.turnOrder.length) {
      room.rounds += 1;
      room.turnCount = 0;
      console.log(`üèÅ End of round ${room.rounds - 1} ‚Üí starting round ${room.rounds}`);

      // üß© ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏à‡∏ó‡∏¢‡πå‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å server
      room.currentProblem = generateProblem(mode);
      io.to(mode).emit("newRound", {
        round: room.rounds,
        ...room.currentProblem,
      });
    }

    // üîÑ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ï‡∏≤‡πÄ‡∏•‡πà‡∏ô
    room.currentTurnIndex = (room.currentTurnIndex + 1) % room.turnOrder.length;
    const nextTurn = room.turnOrder[room.currentTurnIndex];
    room.currentTurn = nextTurn;

    console.log(`üîÅ Switching turn to ${nextTurn} (Round ${room.rounds})`);

    io.to(mode).emit("turnSwitch", {
      nextTurn,
      currentTurnIndex: room.currentTurnIndex,
      round: room.rounds,
    });

    // üïí ‡πÉ‡∏´‡πâ host sync timer ‡πÉ‡∏´‡∏°‡πà (‡πÅ‡∏Ñ‡πà‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏ö)
    const hostName = room.turnOrder[0];
    const hostSocket = findSocketByNickname(hostName);
    if (hostSocket) {
      const startTime = Date.now();
      io.to(mode).emit("syncTimer", { mode, startTime });
      console.log(`üïí Timer synced by host (${hostName}) for mode ${mode}`);
    }

    // ‚úÖ ‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å‡∏´‡∏•‡∏±‡∏á 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ (‡∏Å‡∏±‡∏ô trigger ‡∏ã‡πâ‡∏≥‡∏à‡∏≤‡∏Å client ‡∏≠‡∏∑‡πà‡∏ô)
    setTimeout(() => {
      roundLock[mode] = false;
      console.log(`üîì [UNLOCK] ${mode} ready for next resume`);
    }, 3000);
  });

  /* üßÆ sync ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å client */
  socket.on("answerResult", (data) => {
    if (!data.mode) return;
    const room = gameRooms[data.mode];
    if (!room) return;

    io.to(data.mode).emit("answerResult", data);


  });

  /* üö™ ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏≠‡∏Å‡∏Å‡∏•‡∏≤‡∏á‡πÄ‡∏Å‡∏° */
  socket.on("playerLeftGame", ({ nickname, mode }) => {
    const room = gameRooms[mode];
    if (!room) return;

    console.log(`üö™ ${nickname} left ${mode}`);

    room.turnOrder = room.turnOrder.filter((n) => n !== nickname);
    room.players = room.players.filter((n) => n !== nickname);

    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏´‡∏•‡∏∑‡∏≠ < 2 ‚Üí ‡∏à‡∏ö‡πÄ‡∏Å‡∏°‡πÄ‡∏•‡∏¢
    if (room.turnOrder.length < 2) {
      io.to(mode).emit("gameover", { reason: "not_enough_players" });
      delete gameRooms[mode];
      console.log("üíÄ Game ended (not enough players)");
      return;
    }

    // ‡∏ñ‡πâ‡∏≤‡∏≠‡∏≠‡∏Å‡∏ï‡∏≠‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ó‡∏¥‡∏£‡πå‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á ‚Üí ‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
    if (room.currentTurn === nickname) {
      room.currentTurnIndex %= room.turnOrder.length;
      const nextTurn = room.turnOrder[room.currentTurnIndex];
      room.currentTurn = nextTurn;

      io.to(mode).emit("turnSwitch", {
        nextTurn,
        currentTurnIndex: room.currentTurnIndex,
      });

      const nextSocket = findSocketByNickname(nextTurn);
      if (nextSocket) io.to(nextSocket).emit("yourTurn", { mode });
    }
  });

  /* üü° ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å lobby */
  socket.on("leaveLobby", (nickname) => {
    if (!nickname) return;
    if (players[socket.id]) {
      players[socket.id].isOnline = false;
      players[socket.id].mode = null;
    }
    console.log(`üö™ ${nickname} left lobby`);
    updatePlayerList();
  });

  /* üî¥ disconnect */
  socket.on("disconnect", () => {
    const player = players[socket.id];
    if (!player) return;

    console.log(`üî¥ ${player.nickname} disconnected`);

    // ‡πÄ‡∏≠‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å waiting room ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°
    if (player.mode && waitingRooms[player.mode]) {
      waitingRooms[player.mode] = waitingRooms[player.mode].filter(
        (p) => p !== player.nickname
      );

      io.to(player.mode).emit("waitingList", {
        mode: player.mode,
        players: waitingRooms[player.mode],
      });
    }

    player.isOnline = false;
    updatePlayerList();
  });
});

/* üß≠ UPDATE PLAYER LIST --------------------------------------------- */
function updatePlayerList() {
  const list = Object.values(players)
    .filter((p) => p.isOnline)
    .map((p) => p.nickname);
  io.emit("playerList", list);
}

/* üîç FIND SOCKET BY NICKNAME ---------------------------------------- */
function findSocketByNickname(name) {
  return Object.keys(players).find((id) => players[id]?.nickname === name);
}

/* üü¢ START SERVER ---------------------------------------------------- */
server.listen(4000, () =>
  console.log("‚úÖ Server running on port 4000 (multi-turn, rounds, and reconnect safe)")
);
